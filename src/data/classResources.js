/**
 * Class-specific resource systems for the spell wizard
 */

const CLASS_RESOURCES = {
    // Pyrofiend Resource System
    infernoLevels: {
      name: 'Inferno Levels',
      description: 'A stacking resource that increases the power of fire spells. Maximum of 5 levels.',
      mechanics: 'Each level increases fire damage by 10%. Some spells consume levels for powerful effects.',
      maxValue: 5,
      defaultCost: 1,
      generation: 'Generated by casting fire spells or dealing fire damage.',
      decay: 'Levels decay by 1 every 3 rounds outside of combat.',
      color: '#FF4500', // Orange-red
      icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_fire_fire.jpg',
      class: 'pyrofiend',
      visualEffect: 'Flames grow around the caster with each level.',
      spellModifiers: [
        { effect: 'damage', type: 'fire', value: 10, isPercentage: true, perLevel: true },
        { effect: 'critChance', type: 'fire', value: 2, isPercentage: true, perLevel: true }
      ]
    },
    
    // Gambler & Fate Weaver Resource System
    fortunePoints: {
      name: 'Fortune Points',
      description: 'Points that represent luck and probability manipulation.',
      mechanics: 'Spend points to improve odds or trigger special effects. Can be risked for greater rewards.',
      maxValue: 5,
      defaultCost: 1,
      generation: 'Generated by successful critical hits or by taking calculated risks.',
      decay: 'Does not naturally decay.',
      color: '#FFD700', // Gold
      icon: 'https://wow.zamimg.com/images/wow/icons/large/inv_misc_coin_18.jpg',
      class: 'gambler,fateweaver',
      visualEffect: 'Shimmering gold coins orbit the caster.',
      spellModifiers: [
        { effect: 'critChance', type: 'all', value: 5, isPercentage: true, perPoint: true },
        { effect: 'procChance', type: 'all', value: 5, isPercentage: true, perPoint: true }
      ],
      specialMechanics: {
        cardDraw: 'Some abilities let you "draw" from a deck of special effects.',
        riskReward: 'Abilities can have higher payoffs when risking more Fortune Points.'
      }
    },
    
    // Primalist Resource System
    totemicSynergy: {
      name: 'Totemic Synergy',
      description: 'Represents the connection between the Primalist and their active totems.',
      mechanics: 'Strengthens as more totems are deployed. Different totem combinations create unique effects.',
      maxValue: 100,
      defaultCost: 20,
      generation: 'Generated by deploying totems and enhanced when totems affect targets.',
      decay: 'Decays by 5 points per round when no totems are active.',
      color: '#7CFC00', // Lawn green
      icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_stoneskintotem.jpg',
      class: 'primalist',
      visualEffect: 'Swirling elemental energy links the caster to active totems.',
      spellModifiers: [
        { effect: 'totemPower', type: 'all', value: 1, isPercentage: true, per20Points: true },
        { effect: 'totemDuration', type: 'all', value: 5, isPercentage: true, per20Points: true }
      ],
      specialMechanics: {
        totemTypes: ['Earth', 'Fire', 'Water', 'Air'],
        totemCombos: 'Special synergy bonuses when different totem types are deployed together.'
      }
    },
    
    // Berserker Resource System
    rage: {
      name: 'Rage',
      description: 'A resource representing battle fury that builds as combat continues.',
      mechanics: 'Higher rage enables more powerful attacks, but reduces control and defense.',
      maxValue: 100,
      defaultCost: 25,
      generation: 'Generated by dealing and taking damage in combat.',
      decay: 'Decays by 5 points per round outside of combat.',
      color: '#B22222', // Firebrick red
      icon: 'https://wow.zamimg.com/images/wow/icons/large/ability_warrior_rampage.jpg',
      class: 'berserker',
      visualEffect: 'Red aura intensifies with higher Rage.',
      spellModifiers: [
        { effect: 'damage', type: 'physical', value: 0.5, isPercentage: true, per10Points: true },
        { effect: 'damageReduction', type: 'all', value: -0.2, isPercentage: true, per10Points: true }
      ],
      specialMechanics: {
        berserking: 'At 100 Rage, enter Berserking state for increased power but reduced control.',
        enrage: 'Taking heavy damage can trigger automatic Rage generation.'
      }
    },
    
    // Covenbane Resource System
    hexbreakerCharges: {
      name: 'Hexbreaker Charges',
      description: 'Charges that empower abilities to counter and disrupt magical effects.',
      mechanics: 'Spend charges to counter spells, dispel effects, or enhance anti-magic attacks.',
      maxValue: 3,
      defaultCost: 1,
      generation: 'Generated when successfully resisting or countering magical effects.',
      decay: 'Does not naturally decay.',
      color: '#4169E1', // Royal blue
      icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_arcane_arcane01.jpg',
      class: 'covenbane',
      visualEffect: 'Glowing blue runes orbit the caster with each charge.',
      spellModifiers: [
        { effect: 'spellResistance', type: 'all', value: 10, isPercentage: true, perCharge: true },
        { effect: 'dispelChance', type: 'all', value: 15, isPercentage: true, perCharge: true }
      ],
      specialMechanics: {
        spellReflection: 'Can spend charges to reflect spells back at casters.',
        magicDisruption: 'Presence reduces the potency of nearby magical effects.'
      }
    },
    
    // Dreadnaught Resource System
    darkResilience: {
      name: 'Dark Resilience',
      description: 'A measure of the Dreadnaught\'s ability to withstand and convert damage.',
      mechanics: 'Accumulates as damage is taken. Spend to heal or empower defensive abilities.',
      maxValue: 100,
      defaultCost: 20,
      generation: 'Generated by taking damage and remaining in combat.',
      decay: 'Decays by 10 points per round outside of combat.',
      color: '#800080', // Purple
      icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_shadow_shadesofdarkness.jpg',
      class: 'dreadnaught',
      visualEffect: 'Dark shadow armor forms and thickens with higher values.',
      spellModifiers: [
        { effect: 'damageReduction', type: 'all', value: 0.5, isPercentage: true, per20Points: true },
        { effect: 'selfHealing', type: 'conversion', value: 1, isPercentage: true, per20Points: true }
      ],
      specialMechanics: {
        damageConversion: 'Can convert accumulated damage to healing or temporary hit points.',
        unbreakable: 'At maximum Dark Resilience, can activate Unbreakable state for temporary invulnerability.'
      }
    },
    
    // Warden Resource System
    vengeancePoints: {
      name: 'Vengeance Points',
      description: 'Points that accumulate as allies take damage, fueling protective abilities.',
      mechanics: 'Spend points to protect allies or counter-attack enemies who harm them.',
      maxValue: 5,
      defaultCost: 1,
      generation: 'Generated when allies within protection range take damage.',
      decay: 'Decays by 1 point every 5 rounds outside of combat.',
      color: '#DAA520', // Goldenrod
      icon: 'https://wow.zamimg.com/images/wow/icons/large/ability_paladin_vengeanceaura.jpg',
      class: 'warden',
      visualEffect: 'Golden shield symbols appear around the caster with each point.',
      spellModifiers: [
        { effect: 'allyDamageReduction', type: 'all', value: 4, isPercentage: true, perPoint: true },
        { effect: 'counterAttackDamage', type: 'all', value: 20, isPercentage: true, perPoint: true }
      ],
      specialMechanics: {
        safeguard: 'Can redirect damage from protected allies to self.',
        retribution: 'Attacks against enemies who harm allies deal bonus damage.'
      }
    },
    
    // Elementalist Resource System
    elementalHarmony: {
      name: 'Elemental Harmony',
      description: 'Balance between elemental forces that enhances magical power.',
      mechanics: 'Different elements can be in harmony or discord, changing spell effects.',
      maxValue: 100,
      defaultCost: 25,
      generation: 'Generated by balancing use of different elemental spells.',
      decay: 'Decays by 5 points per round when using only a single element.',
      color: '#48D1CC', // Medium turquoise
      icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_elementalshields.jpg',
      class: 'elementalist',
      visualEffect: 'Elemental symbols orbit the caster, changing color based on recent spells.',
      spellModifiers: [
        { effect: 'elementalDamage', type: 'all', value: 1, isPercentage: true, per10Points: true },
        { effect: 'elementalCostReduction', type: 'all', value: 0.5, isPercentage: true, per10Points: true }
      ],
      specialMechanics: {
        elementalCombos: 'Casting different elements in sequence creates unique combo effects.',
        perfectHarmony: 'At 100 Harmony, can enter Perfect Harmony state for empowered spells.'
      }
    },
    
    // Chronomancer Resource System
    temporalEnergy: {
      name: 'Temporal Energy',
      description: 'Energy drawn from manipulating the flow of time.',
      mechanics: 'Spend to accelerate allies, slow enemies, or manipulate spell durations.',
      maxValue: 100,
      defaultCost: 20,
      generation: 'Accumulates naturally over time, faster during combat.',
      decay: 'Does not decay naturally.',
      color: '#9932CC', // Dark orchid
      icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_arcane_arcane04.jpg',
      class: 'chronomancer',
      visualEffect: 'Clock symbols and time runes orbit the caster.',
      spellModifiers: [
        { effect: 'cooldownReduction', type: 'all', value: 0.5, isPercentage: true, per20Points: true },
        { effect: 'spellHaste', type: 'all', value: 1, isPercentage: true, per20Points: true }
      ],
      specialMechanics: {
        timeRewind: 'Can spend energy to reset cooldowns or recover from effects.',
        timeDilation: 'Can extend duration of beneficial effects or reduce duration of harmful ones.'
      }
    },
    
    // Generic resources for all classes/monsters
    generic: {
      mana: {
        name: 'Mana',
        description: 'Magical energy used to cast spells.',
        mechanics: 'Primary resource for spellcasting. Different spells cost different amounts.',
        color: '#0070DD', // Blue
        icon: 'https://wow.zamimg.com/images/wow/icons/large/inv_elemental_mote_mana.jpg'
      },
      actionPoints: {
        name: 'Action Points',
        description: 'Points representing combat actions that can be taken.',
        mechanics: 'Each action costs AP. Characters typically have 3-5 AP per round.',
        color: '#FFD700', // Gold
        icon: 'https://wow.zamimg.com/images/wow/icons/large/spell_nature_time.jpg'
      },
      health: {
        name: 'Health',
        description: 'Vitality that can sometimes be spent for powerful effects.',
        mechanics: 'Some abilities cost Health instead of Mana, representing blood magic or life sacrifice.',
        color: '#FF0000', // Red
        icon: 'https://wow.zamimg.com/images/wow/icons/large/inv_potion_54.jpg'
      }
    }
  };
  
  // Function to get class resource by ID
  export const getResource = (resourceId) => {
    // Check direct match
    if (CLASS_RESOURCES[resourceId]) {
      return CLASS_RESOURCES[resourceId];
    }
    
    // Check generic resources
    if (CLASS_RESOURCES.generic[resourceId]) {
      return CLASS_RESOURCES.generic[resourceId];
    }
    
    return null;
  };
  
  // Function to get resources for a specific class
  export const getClassResources = (classId) => {
    const resources = [];
    
    // Add class-specific resources
    Object.entries(CLASS_RESOURCES).forEach(([resourceId, resourceData]) => {
      if (resourceId !== 'generic' && resourceData.class && resourceData.class.split(',').includes(classId)) {
        resources.push({
          id: resourceId,
          ...resourceData
        });
      }
    });
    
    // Add generic resources
    Object.entries(CLASS_RESOURCES.generic).forEach(([resourceId, resourceData]) => {
      resources.push({
        id: resourceId,
        ...resourceData
      });
    });
    
    return resources;
  };
  
  // Function to get resources for monsters
  export const getMonsterResources = () => {
    return Object.entries(CLASS_RESOURCES.generic).map(([resourceId, resourceData]) => ({
      id: resourceId,
      ...resourceData
    }));
  };
  
  export default CLASS_RESOURCES;